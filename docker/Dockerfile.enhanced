# Enhanced Dockerfile for Water Management ETL
FROM python:3.9-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    default-jdk \
    curl \
    gcc \
    g++ \
    make \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Set Java environment
ENV JAVA_HOME=/usr/lib/jvm/default-java
ENV PATH="${JAVA_HOME}/bin:${PATH}"

# Copy requirements
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY src/ ./src/
COPY sql/ ./sql/
COPY data/ ./data/

# Create necessary directories
RUN mkdir -p logs data/spark_output

# Create non-root user
RUN useradd -m -u 1000 dataeng && \
    chown -R dataeng:dataeng /app
USER dataeng

# Default command
CMD ["python", "src/enhanced_production_ingestion.py"]# Enhanced Dockerfile for Water Management ETL
FROM python:3.9-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    default-jdk \
    curl \
    gcc \
    g++ \
    make \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Set Java environment
ENV JAVA_HOME=/usr/lib/jvm/default-java
ENV PATH="${JAVA_HOME}/bin:${PATH}"

# Copy requirements
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY src/ ./src/
COPY sql/ ./sql/
COPY data/ ./data/

# Create necessary directories
RUN mkdir -p logs data/spark_output

# Create non-root user
RUN useradd -m -u 1000 dataeng && \
    chown -R dataeng:dataeng /app
USER dataeng

# Default command
CMD ["python", "src/enhanced_production_ingestion.py"]
